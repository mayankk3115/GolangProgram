package main

import (
	"fmt"
)

type Node struct {
	value int
	next  *Node
}

type LinkedList struct {
	head   *Node
	length int
}

func (l *LinkedList) insertion(val int) {

	var n Node

	n.value = val

	if l.head == nil {

		l.head = &n
		l.length++
		return

	} else {

		temp := l.head

		for temp.next != nil {

			temp = temp.next
		}

		temp.next = &n
		l.length++
	}
}

func (l *LinkedList) print() {

	temp := l.head
	for temp != nil {

		fmt.Println(temp.value)
		temp = temp.next
	}

}

func (l *LinkedList) rotateElementsOfGivenSize(head *Node, k int) *Node {

	current := head
	temp := head
	var prev *Node
	count := 0

	for current != nil && count < k {

		temp = current.next
		current.next = prev
		prev = current
		current = temp
		count++

	}

	if temp != nil {

		head.next = l.rotateElementsOfGivenSize(temp, k)
	}

	return prev

}

func main() {

	var l LinkedList
	var l2 LinkedList

	l.insertion(10)
	l.insertion(20)
	l.insertion(30)
	l.insertion(40)
	l.insertion(50)
	
	l2.insertion(25)
	l2.insertion(35)
	l2.head.next.next = l.head.next.next.next

	l.print()
	fmt.Println("After rotation")
	l.head = l.rotateElementsOfGivenSize(l.head, 3)
	l.print()

}
