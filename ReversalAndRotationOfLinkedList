package main

import (
	"fmt"
)

type Node struct {
	value int
	next  *Node
}

type LinkedList struct {
	head   *Node
	length int
}

func (ll *LinkedList) insertion(val int) {

	n := Node{}
	n.value = val
	temp := ll.head

	if ll.head == nil {
		ll.head = &n
		ll.length++
		return

	} else {

		for temp.next != nil {

			temp = temp.next
		}

		temp.next = &n
		ll.length++
	}

}

func (ll *LinkedList) rotation(n int) {

	temp := ll.head
	var prev *Node
	if n > ll.length {
		fmt.Println("Rotation not possible index out of bond")
		return
	} else {

		for i := 0; i < n-1; i++ {

			temp = temp.next
		}
		prev = temp

		for temp.next != nil {

			temp = temp.next
		}
		temp.next = ll.head
		ll.head = prev.next
		prev.next = nil
	}
	ll.print()
}

func (ll *LinkedList) reversal() {

	temp := ll.head
	current := ll.head
	var prev *Node

	for ll.head.next != nil {
		ll.head = ll.head.next
	}
	for current != nil {
		temp = temp.next
		current.next = prev
		prev = current
		current = temp

	}

	ll.print()
}

func (ll *LinkedList) print() {

	temp := ll.head

	for temp != nil {

		fmt.Println(temp.value)
		temp = temp.next
	}
}

func main() {

	ll := LinkedList{}

	ll.insertion(12)
	ll.insertion(13)
	ll.insertion(14)
	ll.insertion(15)
	ll.insertion(16)
	ll.insertion(17)
	ll.print()
	fmt.Println("Rotation of LinkedList")
	ll.rotation(2)
	fmt.Println("Reversal of LinkedList")
	ll.reversal()

}
